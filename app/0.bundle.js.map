{"version":3,"sources":["webpack:///app/0.bundle.js","webpack:///../node_modules/image-preloader/src/main.js","webpack:///../node_modules/promise-ext-settled/src/index.js","webpack:///../node_modules/image-preloader/src/index.js"],"names":["webpackJsonp","267","module","exports","__webpack_require__","allSettled","ImagePreloader","fallbackImage","onProgress","this","HTMLImageElement","simplePreload","imageSource","Promise","resolve","reject","img","complete","naturalHeight","onload","bind","onerror","onabort","Image","src","prototype","preload","args","that","imagesToLoad","Array","concat","apply","slice","call","arguments","map","catch","brokenImage","then","setAttribute","268","promises","mapped","promise","value","status","e","all","39"],"mappings":"AAAAA,cAAc,IAERC,IACA,SAAUC,EAAQC,EAASC,GCEjC,GAAAC,GAAAD,EAAA,KAWAE,EAAA,SAAAC,EAAAC,GAIAC,KAAAD,WAAA,kBAAAA,KAAA,KAIAC,KAAAF,cAAA,gBAAAA,gBAAAG,kBAAAH,EAAA,KAUAD,GAAAK,cAAA,SAAAC,GACA,UAAAC,SAAA,SAAAC,EAAAC,GACA,GAAAC,EAEAJ,aAAAF,mBACAM,EAAAJ,EAEAI,EAAAC,SAGaD,EAAAE,cACbJ,EAAAE,GAEAD,EAAAC,IALAA,EAAAG,OAAAL,EAAAM,KAAA,KAAAJ,GACAA,EAAAK,QAAAL,EAAAM,QAAAP,EAAAK,KAAA,KAAAJ,KAMS,gBAAAJ,KACTI,EAAA,GAAAO,OACAP,EAAAG,OAAAL,EAAAM,KAAA,KAAAJ,GACAA,EAAAK,QAAAL,EAAAM,QAAAP,EAAAK,KAAA,KAAAJ,GACAA,EAAAQ,IAAAZ,MA2BAN,EAAAmB,UAAAC,QAAA,SAAAC,GACA,GAAAC,GAAAnB,KACAoB,EAAAC,MAAAL,UAAAM,OAAAC,SAAAF,MAAAL,UAAAQ,MAAAC,KAAAC,WAoBA,OAlBAN,KAAAO,IAAA,SAAAxB,GACA,MAAAN,GAAAK,cAAAC,GAAAyB,MAAA,SAAAC,GACA,MAAAV,GAAArB,cACAD,EAAAK,cAAAiB,EAAArB,eACAgC,KAAA,SAAAhC,GAIA,MAHA+B,GAAAE,aAAA,gBAAAF,EAAAd,KACAc,EAAAd,IAAAjB,EAAAiB,IAEAc,GACqB,WACrB,MAAAzB,SAAAE,OAAAuB,KAIAzB,QAAAE,OAAAuB,OAIAjC,EAAAwB,EAAAD,EAAApB,aAGAN,EAAAC,QAAAG,GDUMmC,IACA,SAAUvC,EAAQC,GEnGxB,QAAAE,GAAAqC,EAAAlC,GACA,GAAAmC,GAAAD,EAAAN,IAAA,SAAAQ,GACA,MAAAA,GAAAL,KAAA,SAAAM,GACA,OACAA,QACAC,YAES,SAAAC,GACT,OACAF,MAAAE,EACAD,aAESP,KAAA,SAAAM,GAKT,MAJA,kBAAArC,IACAA,EAAAqC,GAGAA,KAIA,OAAAhC,SAAAmC,IAAAL,GAGAzC,EAAAC,QAAAE,GF2HM4C,GACA,SAAU/C,EAAQC,EAASC,GGhKjCF,EAAAC,QAAAC,EAAA","file":"app/0.bundle.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ 267:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @licence MIT\n * @author Sergey Melyukov\n */\n\nvar allSettled = __webpack_require__(268);\n\n/**\n * Image preloader\n *\n * @class ImagePreloader\n * @constructor\n *\n * @param {(String|HTMLImageElement)=} fallbackImage\n * @param {function({status:boolean, value:HTMLImageElement})=} onProgress\n */\nvar ImagePreloader = function(fallbackImage, onProgress) {\n    /**\n     * @type {?function({status: boolean, value: HTMLImageElement})}\n     */\n    this.onProgress = typeof onProgress === 'function' ? onProgress : null;\n    /**\n     * @type {?String|HTMLImageElement}\n     */\n    this.fallbackImage = typeof fallbackImage === 'string' || fallbackImage instanceof HTMLImageElement ? fallbackImage : null;\n};\n\n/**\n * Do simple image preloading.\n *\n * @param {!(String|HTMLImageElement)} imageSource\n *\n * @return {Promise} will be resolved/rejected with HTMLImageElement\n */\nImagePreloader.simplePreload = function(imageSource) {\n    return new Promise(function(resolve, reject) {\n        var img;\n\n        if (imageSource instanceof HTMLImageElement) {\n            img = imageSource;\n\n            if (!img.complete) {\n                img.onload = resolve.bind(null, img);\n                img.onerror = img.onabort = reject.bind(null, img);\n            } else if (img.naturalHeight) {\n                resolve(img);\n            } else {\n                reject(img);\n            }\n        } else if (typeof imageSource === 'string') {\n            img = new Image();\n            img.onload = resolve.bind(null, img);\n            img.onerror = img.onabort = reject.bind(null, img);\n            img.src = imageSource;\n        }\n    });\n};\n\n/**\n * Preload image.\n *\n * If fallbackImage-property is defined and correct, then src-attribute for the broken images will replaced by fallbackImage\n * As well, origin image url will be placed to 'data-fail-src' attribute.\n *\n * If onProgress-method is defined, then this method will be calling for every image loading (fulfilled of rejected).\n *\n * @param {...(String|HTMLImageElement|Array<String|HTMLImageElement>)} args\n *\n * @return {Promise} will be resolved with Array<{status:boolean, value:HTMLImageElement}>\n *\n *     status-property - is the status of image loading\n *     status-property will be true if:\n *      - original image loading is ok\n *      - or original image loading is fail but fallback-image loading is ok\n *     status-property will be false if:\n *      - original image loading is fail\n *      - or original image loading is fail and fallback-image loading is fail\n *\n *     value-property - is the image that was loaded\n */\nImagePreloader.prototype.preload = function(args) {\n    var that = this,\n        imagesToLoad = Array.prototype.concat.apply([], Array.prototype.slice.call(arguments));\n\n    imagesToLoad = imagesToLoad.map(function(imageSource) {\n        return ImagePreloader.simplePreload(imageSource).catch(function(brokenImage) {\n            if (that.fallbackImage) {\n                return ImagePreloader.simplePreload(that.fallbackImage)\n                    .then(function(fallbackImage) {\n                        brokenImage.setAttribute('data-fail-src', brokenImage.src);\n                        brokenImage.src = fallbackImage.src;\n\n                        return brokenImage;\n                    }, function() {\n                        return Promise.reject(brokenImage);\n                    });\n            }\n\n            return Promise.reject(brokenImage);\n        });\n    });\n\n    return allSettled(imagesToLoad, that.onProgress);\n};\n\nmodule.exports = ImagePreloader;\n\n\n/***/ }),\n\n/***/ 268:\n/***/ (function(module, exports) {\n\n/**\n * @licence\n * @author Sergey Melyukov 2016\n */\n\n/**\n * Waiting while all promises will be settled to onFulfilled or onRejected state\n * Returned promise will be resolved with array with info for every passed promise:\n * Array<{status:boolean, value:*}>\n *\n * onProgress-function will be called (if passed) for every settled promise\n *\n * @param {Array<Promise>} promises\n * @param {function({status:boolean, value:*})=} onProgress\n *\n * @return {Promise}\n */\nfunction allSettled(promises, onProgress) {\n    var mapped = promises.map(function(promise) {\n        return promise.then(function(value) {\n            return {\n                value: value,\n                status: true\n            };\n        }, function(e) {\n            return {\n                value: e,\n                status: false\n            };\n        }).then(function(value) {\n            if (typeof onProgress === 'function') {\n                onProgress(value);\n            }\n\n            return value;\n        });\n    });\n\n    return Promise.all(mapped);\n}\n\nmodule.exports = allSettled;\n\n\n/***/ }),\n\n/***/ 39:\n/***/ (function(module, exports, __webpack_require__) {\n\n/**\n * @licence MIT\n * @author Sergey Melyukov\n */\n\nmodule.exports = __webpack_require__(267);\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// app/0.bundle.js","/**\n * @licence MIT\n * @author Sergey Melyukov\n */\n\nvar allSettled = require('promise-ext-settled');\n\n/**\n * Image preloader\n *\n * @class ImagePreloader\n * @constructor\n *\n * @param {(String|HTMLImageElement)=} fallbackImage\n * @param {function({status:boolean, value:HTMLImageElement})=} onProgress\n */\nvar ImagePreloader = function(fallbackImage, onProgress) {\n    /**\n     * @type {?function({status: boolean, value: HTMLImageElement})}\n     */\n    this.onProgress = typeof onProgress === 'function' ? onProgress : null;\n    /**\n     * @type {?String|HTMLImageElement}\n     */\n    this.fallbackImage = typeof fallbackImage === 'string' || fallbackImage instanceof HTMLImageElement ? fallbackImage : null;\n};\n\n/**\n * Do simple image preloading.\n *\n * @param {!(String|HTMLImageElement)} imageSource\n *\n * @return {Promise} will be resolved/rejected with HTMLImageElement\n */\nImagePreloader.simplePreload = function(imageSource) {\n    return new Promise(function(resolve, reject) {\n        var img;\n\n        if (imageSource instanceof HTMLImageElement) {\n            img = imageSource;\n\n            if (!img.complete) {\n                img.onload = resolve.bind(null, img);\n                img.onerror = img.onabort = reject.bind(null, img);\n            } else if (img.naturalHeight) {\n                resolve(img);\n            } else {\n                reject(img);\n            }\n        } else if (typeof imageSource === 'string') {\n            img = new Image();\n            img.onload = resolve.bind(null, img);\n            img.onerror = img.onabort = reject.bind(null, img);\n            img.src = imageSource;\n        }\n    });\n};\n\n/**\n * Preload image.\n *\n * If fallbackImage-property is defined and correct, then src-attribute for the broken images will replaced by fallbackImage\n * As well, origin image url will be placed to 'data-fail-src' attribute.\n *\n * If onProgress-method is defined, then this method will be calling for every image loading (fulfilled of rejected).\n *\n * @param {...(String|HTMLImageElement|Array<String|HTMLImageElement>)} args\n *\n * @return {Promise} will be resolved with Array<{status:boolean, value:HTMLImageElement}>\n *\n *     status-property - is the status of image loading\n *     status-property will be true if:\n *      - original image loading is ok\n *      - or original image loading is fail but fallback-image loading is ok\n *     status-property will be false if:\n *      - original image loading is fail\n *      - or original image loading is fail and fallback-image loading is fail\n *\n *     value-property - is the image that was loaded\n */\nImagePreloader.prototype.preload = function(args) {\n    var that = this,\n        imagesToLoad = Array.prototype.concat.apply([], Array.prototype.slice.call(arguments));\n\n    imagesToLoad = imagesToLoad.map(function(imageSource) {\n        return ImagePreloader.simplePreload(imageSource).catch(function(brokenImage) {\n            if (that.fallbackImage) {\n                return ImagePreloader.simplePreload(that.fallbackImage)\n                    .then(function(fallbackImage) {\n                        brokenImage.setAttribute('data-fail-src', brokenImage.src);\n                        brokenImage.src = fallbackImage.src;\n\n                        return brokenImage;\n                    }, function() {\n                        return Promise.reject(brokenImage);\n                    });\n            }\n\n            return Promise.reject(brokenImage);\n        });\n    });\n\n    return allSettled(imagesToLoad, that.onProgress);\n};\n\nmodule.exports = ImagePreloader;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/image-preloader/src/main.js\n// module id = 267\n// module chunks = 0","/**\n * @licence\n * @author Sergey Melyukov 2016\n */\n\n/**\n * Waiting while all promises will be settled to onFulfilled or onRejected state\n * Returned promise will be resolved with array with info for every passed promise:\n * Array<{status:boolean, value:*}>\n *\n * onProgress-function will be called (if passed) for every settled promise\n *\n * @param {Array<Promise>} promises\n * @param {function({status:boolean, value:*})=} onProgress\n *\n * @return {Promise}\n */\nfunction allSettled(promises, onProgress) {\n    var mapped = promises.map(function(promise) {\n        return promise.then(function(value) {\n            return {\n                value: value,\n                status: true\n            };\n        }, function(e) {\n            return {\n                value: e,\n                status: false\n            };\n        }).then(function(value) {\n            if (typeof onProgress === 'function') {\n                onProgress(value);\n            }\n\n            return value;\n        });\n    });\n\n    return Promise.all(mapped);\n}\n\nmodule.exports = allSettled;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/promise-ext-settled/src/index.js\n// module id = 268\n// module chunks = 0","/**\n * @licence MIT\n * @author Sergey Melyukov\n */\n\nmodule.exports = require('./main');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ../node_modules/image-preloader/src/index.js\n// module id = 39\n// module chunks = 0"],"sourceRoot":""}